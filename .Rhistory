dslabs::read_mnist(download = T, destdir = "/home/zl22291@bristol.ac.uk/Documents/Projects/onlinePCA/data")
dslabs::read_mnist("/home/zl22291@bristol.ac.uk/Documents/Projects/onlinePCA/data")
Rcpp::compileAttributes()
devtools::load_all()
mnist = dslabs::read_mnist("/home/zl22291@bristol.ac.uk/Documents/Projects/onlinePCA/data")
onlinePCA::algorithm1(x = mnist$test$images[1:100,], k = 5, eps = 1)
Rcpp::compileAttributes()
devtools::load_all()
onlinePCA::algorithm1(x = mnist$test$images[1:100,], k = 5, eps = 1)
devtools::load_all()
onlinePCA::algorithm1(x = mnist$test$images[1:60,], k = 5, eps = 1)
View(U)
devtools::load_all()
y = onlinePCA::algorithm1(x = mnist$test$images[1:500,], k = 5, eps = 1)
View(y)
dim(y)
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
U = onlinePCA::algorithm1(x = mnist$test$images[1:500,], k = 5, eps = 1)
U %*% t(U) %*% mnist$test$images[1:500,]
U %*% t(U) %*% y
U %*% y
x_r = U %*% y
View(x_r)
dim(x_r)
x = mnist$test$images[1:500,]
dim(x)
x_r_t = t(x_r)
dim(x_r_t)
image(1:28, 1:28, matrix(x_r_t[16,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
dim(x_r_t)
image(1:28, 1:28, matrix(x_r_t[i,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
for(i in 1:500){
image(1:28, 1:28, matrix(x_r_t[i,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
}
mnist$test$labels
mnist$test$labels == 7
sum(mnist$test$labels == 7)
table(mnist$test$labels)
for(i in 1:500){
image(1:28, 1:28, matrix(x_r_t[i,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
}
for(i in 1:500){.
image(1:28, 1:28, matrix(x_r_t[i,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
}
for(i in 1:500){
image(1:28, 1:28, matrix(x_r_t[i,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
}
image(1:28, 1:28, matrix(x_r_t[1,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(x_r_t[10,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(x_r_t[11,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(x_r_t[12,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(x_r_t[50,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(x_r_t[100,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(x_r_t[70,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(x_r_t[40,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(x_r_t[50,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(x_r_t[60,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(x_r_t[65,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(x_r_t[70,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(x_r_t[68,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(x_r_t[67,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(x_r_t[66,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(x_r_t[67,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(x_r_t[80,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(x_r_t[90,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(x_r_t[230,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(x_r_t[300,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(x_r_t[600,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(x_r_t[500,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
x_r_t[500,]
image(1:28, 1:28, matrix(x_r_t[400,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(x_r_t[450,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(x_r_t[470,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
mnist$test$labels == 7
mnist_7 = mnist$test$images[mnist$test$labels == 7, ]
nrow(mnist_7)
Rcpp::compileAttributes()
devtools::load_all()
Rcpp::compileAttributes()
devtools::load_all()
devtools::load_all()
Rcpp::compileAttributes()
devtools::load_all()
U = onlinePCA::algorithm1(x = mnist_7, k = 5, eps = 1)
devtools::load_all()
y = onlinePCA::algorithm1(x = mnist_7, k = 5, eps = 1)
x_r = U %*% y
x_r_t = t(x_r)
dim(x_r_t)
for(i in 1:1028){
image(1:28, 1:28, matrix(x_r_t[i,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
}
for(i in 1:200){
image(1:28, 1:28, matrix(x_r_t[i,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
}
for(i in 1:100){
image(1:28, 1:28, matrix(x_r_t[i,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
}
for(i in 1:150){
image(1:28, 1:28, matrix(x_r_t[i,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
}
for(i in 1:150){
image(1:28, 1:28, matrix(x_r_t[i,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
}
install.packages("animation")
library(animation)
install.packages("animation")
install.packages("animation")
library(animation)
# Function to create the animation frames
createAnimationFrames <- function(x_r_t) {
frames <- vector("list", length = nrow(x_r_t))
for (i in 1:nrow(x_r_t)) {
plot <- image(1:28, 1:28, matrix(x_r_t[i,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
frames[[i]] <- plot
}
return(frames)
}
# Create the animation frames
frames <- createAnimationFrames(x_r_t)
# Save the animation as a GIF file
saveGIF({
for (i in 1:length(frames)) {
plot(frames[[i]])
ani.pause(0.2)  # Pause between frames (adjust as needed)
}
}, movie.name = "image_animation.gif", ani.width = 400, ani.height = 400)
frames
# Function to create the animation frames
createAnimationFrames <- function(x_r_t) {
frames <- vector("list", length = nrow(x_r_t))
for (i in 1:nrow(x_r_t)) {
plot <- image(1:28, 1:28, matrix(x_r_t[i,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
frames[[i]] <- plot
}
return(frames)
}
# Create the animation frames
frames <- createAnimationFrames(x_r_t)
frames
frames[[1]]
# Function to create the animation frames
createAnimationFrames <- function(x_r_t) {
frames <- vector("list", length = nrow(x_r_t))
for (i in 1:nrow(x_r_t)) {
frames[[i]] <- matrix(x_r_t[i,], nrow=28)[ , 28:1]
}
return(frames)
}
# Create the animation frames
frames <- createAnimationFrames(x_r_t)
# Save the animation as a GIF file
saveGIF({
for (i in 1:length(frames)) {
image(frames[[i]])
ani.pause(0.2)  # Pause between frames (adjust as needed)
}
}, movie.name = "image_animation.gif", ani.width = 400, ani.height = 400)
i = 1
image(frames[[i]])
frames[[i]]
image(1:28, 1:28, frames[[i]],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="" )
frames[[i]]
image(1:28, 1:28, frames[[i]],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="" )
image(1:28, 1:28, frames[[400]],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="" )
image(1:28, 1:28, matrix(x_r_t[i,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
x_r_t
for(i in 1:150){
image(1:28, 1:28, matrix(x_r_t[i,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
}
for(i in 1:150){
image(1:28, 1:28, matrix(x_r_t[i,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
}
dev.off()
for(i in 1:150){
image(1:28, 1:28, matrix(x_r_t[i,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
}
dev.off()
image(1:28, 1:28, frames[[400]],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="" )
# Save the animation as a GIF file
saveGIF({
for (i in 1:length(frames)) {
image(1:28, 1:28, frames[[i]],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="" )
ani.pause(0.2)  # Pause between frames (adjust as needed)
}
}, movie.name = "image_animation.gif", ani.width = 400, ani.height = 400)
gc()
# Save the animation as a GIF file
saveGIF({
for (i in 1:length(frames)) {
image(1:28, 1:28, frames[[i]],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="" )
ani.pause(0.2)  # Pause between frames (adjust as needed)
}
}, movie.name = "image_animation.gif", ani.width = 400, ani.height = 400)
seq(1,length(frames),10)
# Save the animation as a GIF file
saveGIF({
# Save the animation as a GIF file
saveGIF({
# Save the animation as a GIF file
saveGIF({
for (i in seq(1,length(frames),10)) {
image(1:28, 1:28, frames[[i]],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="" )
ani.pause(0.2)  # Pause between frames (adjust as needed)
}
}, movie.name = "image_animation.gif", ani.width = 400, ani.height = 400)
# Save the animation as a GIF file
saveGIF({
for (i in seq(1,length(frames),10)) {
image(1:28, 1:28, frames[[i]],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="" )
ani.pause(0.2)  # Pause between frames (adjust as needed)
}
}, movie.name = "image_animation.gif", ani.width = 400, ani.height = 400)
i = 400
image(1:28, 1:28, frames[[i]],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="" )
# Save the animation as a GIF file
saveGIF({
for (i in seq(1,length(frames),10)) {
image(1:28, 1:28, frames[[i]],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="" )
ani.pause(0.2)  # Pause between frames (adjust as needed)
}
}, movie.name = "image_animation.gif", ani.width = 400, ani.height = 400)
?animation::saveGIF()
seq(1,length(frames),10)
# Save the animation as a GIF file
saveGIF({
for (i in seq(1,length(frames),10)) {
image(1:28, 1:28, frames[[i]],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="" )
# ani.pause(0.2)  # Pause between frames (adjust as needed)
}
}, movie.name = "image_animation.gif", ani.width = 400, ani.height = 400)
library(magick)
# Function to create the animation frames
createAnimationFrames <- function(x_r_t) {
frames <- vector("list", length = nrow(x_r_t))
for (i in 1:nrow(x_r_t)) {
frames[[i]] <- matrix(x_r_t[i,], nrow=28)[ , 28:1]
}
return(frames)
}
# Create the animation frames
frames <- createAnimationFrames(x_r_t)
# Save the animation as a GIF file
saveGIF({
for (i in seq(1,length(frames),10)) {
image(1:28, 1:28, frames[[i]],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="" )
# ani.pause(0.2)  # Pause between frames (adjust as needed)
}
}, movie.name = "image_animation.gif", ani.width = 400, ani.height = 400)
# Save the animation as a GIF file
createAnimationFrames <- function(x_r_t) {
frames <- vector("list", length = nrow(x_r_t))
for (i in 1:nrow(x_r_t)) {
frames[[i]] <- image(matrix(x_r_t[i,], nrow = 28)[, 28:1], col = gray(seq(0, 1, 0.05)))
}
return(frames)
}
# Create the animation frames
frames <- createAnimationFrames(x_r_t)
# Save the animation as a GIF file
animation <- image_animate(image_join(frames), fps = 10)
image_write(animation, "image_animation.gif")
animation
# Save the animation as a GIF file
animation <- image_animate(image_join(frames), fps = 10)
Rcpp::compileAttributes()
devtools::load_all()
U = onlinePCA::algorithm1(x = mnist_7[1:10,], k = 5, eps = 1)
mnist = dslabs::read_mnist("/home/zl22291@bristol.ac.uk/Documents/Projects/onlinePCA/data")
mnist_7 = mnist$test$images[mnist$test$labels == 7, ]
nrow(mnist_7)
U = onlinePCA::algorithm1(x = mnist_7[1:10,], k = 5, eps = 1)
U = onlinePCA::algorithm1(x = mnist_7[1:10,], k = 1, eps = 1)
U = onlinePCA::algorithm1(x = mnist_7[1:100,], k = 5, eps = 1)
U = onlinePCA::algorithm1(x = mnist_7[1:500,], k = 5, eps = 1)
mnist_7
devtools::load_all()
devtools::load_all()
U = onlinePCA::algorithm1(x = mnist_7[1:500,], k = 5, eps = 1)
mnist = dslabs::read_mnist("/home/zl22291@bristol.ac.uk/Documents/Projects/onlinePCA/data")
mnist_7 = mnist$test$images[mnist$test$labels == 7, ]
U = onlinePCA::algorithm1(x = mnist_7[1:500,], k = 5, eps = 1)
devtools::load_all()
mnist_7_opca = onlinePCA::algorithm1(x = mnist_7, k = 5, eps = 1)
library(magick)
# Function to create the animation frames
createAnimationFrames <- function(x_r_t) {
frames <- vector("list", length = nrow(x_r_t))
for (i in 1:nrow(x_r_t)) {
frames[[i]] <- matrix(x_r_t[i,], nrow=28)[ , 28:1]
}
return(frames)
}
# Create the animation frames
frames <- createAnimationFrames(x_r_t)
mnist_7_opca[[1]]
dim(mnist_7_opca)
class(mnist_7_opca)
dim(mnist_7_opca[1,])
mnist_7_opca[1,]
dim(mnist_7_opca[[1]])
dim(mnist_7_opca[[2]])
y = (mnist_7_opca[[1]])
U = (mnist_7_opca[[2]])
library(animation)
library(magick)
x_r = U %*% y
x_r_t = t(x_r)
dim(x_r_t)
library(animation)
library(magick)
# Function to create the animation frames
createAnimationFrames <- function(x_r_t) {
frames <- vector("list", length = nrow(x_r_t))
for (i in 1:nrow(x_r_t)) {
frames[[i]] <- matrix(x_r_t[i,], nrow=28)[ , 28:1]
}
return(frames)
}
# Create the animation frames
frames <- createAnimationFrames(x_r_t)
# Save the animation as a GIF file
createAnimationFrames <- function(x_r_t) {
frames <- vector("list", length = nrow(x_r_t))
for (i in 1:nrow(x_r_t)) {
frames[[i]] <- image(matrix(x_r_t[i,], nrow = 28)[, 28:1], col = gray(seq(0, 1, 0.05)))
}
return(frames)
}
# Create the animation frames
frames <- createAnimationFrames(x_r_t)
# Save the animation as a GIF file
animation <- image_animate(image_join(frames), fps = 10)
image_write(animation, "image_animation.gif")
# Save the animation as a GIF file
createAnimationFrames <- function(x_r_t) {
frames <- vector("list", length = nrow(x_r_t))
for (i in 1:nrow(x_r_t)) {
frames[[i]] <- image(matrix(x_r_t[i,], nrow = 28)[, 28:1], col = gray(seq(0, 1, 0.05)))
}
return(frames)
}
# Create the animation frames
frames <- createAnimationFrames(x_r_t)
# Save the animation as a GIF file
animation <- image_animate(image_join(frames), fps = 10)
image_write(animation, "image_animation.gif")
mnist = dslabs::read_mnist("/home/zl22291@bristol.ac.uk/Documents/Projects/onlinePCA/data")
mnist_7 = mnist$test$images[mnist$test$labels == 7, ]
nrow(mnist_7)
mnist_7_opca = onlinePCA::algorithm1(x = mnist_7, k = 5, eps = 1)
Rcpp::compileAttributes()
devtools::load_all()
mnist_7_opca = onlinePCA::algorithm1(x = mnist_7, k = 5, eps = 1)
Rcpp::compileAttributes()
devtools::load_all()
mnist_7_opca = onlinePCA::algorithm1(x = mnist_7, k = 5, eps = 1)
Rcpp::compileAttributes()
devtools::load_all()
mnist_7_opca = onlinePCA::algorithm1(x = mnist_7, k = 5, eps = 1)
y = (mnist_7_opca[[1]])
xr = (mnist_7_opca[[1]])
U = (mnist_7_opca[[2]])
x_r_t = t(xr)
dim(x_r_t)
# Function to create the animation frames
createAnimationFrames <- function(x_r_t) {
frames <- vector("list", length = nrow(x_r_t))
for (i in 1:nrow(x_r_t)) {
frames[[i]] <- matrix(x_r_t[i,], nrow=28)[ , 28:1]
}
return(frames)
}
# Create the animation frames
frames <- createAnimationFrames(x_r_t)
# Save the animation as a GIF file
createAnimationFrames <- function(x_r_t) {
frames <- vector("list", length = nrow(x_r_t))
for (i in 1:nrow(x_r_t)) {
frames[[i]] <- image(matrix(x_r_t[i,], nrow = 28)[, 28:1], col = gray(seq(0, 1, 0.05)))
}
return(frames)
}
# Create the animation frames
frames <- createAnimationFrames(x_r_t)
# Save the animation as a GIF file
animation <- image_animate(image_join(frames), fps = 10)
png(file="example%02d.png", width=200, height=200)
for (i in c(10:1, "G0!")){
plot.new()
text(.5, .5, i, cex = 6)
}
nrow(x_r_t)
png(file="examples/images/example%02d.png", width=200, height=200)
for (i in nrow(x_r_t)){
plot.new()
image(1:28, 1:28, matrix(x_r_t[i,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
}
dev.off()
png(file="examples/images/example%02d.png", width=200, height=200)
for (i in nrow(x_r_t)){
plot.new()
image(1:28, 1:28, matrix(x_r_t[i,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
}
png(file="examples/images/example%02d.png", width=200, height=200)
for (i in 1:nrow(x_r_t)){
plot.new()
image(1:28, 1:28, matrix(x_r_t[i,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
}
nrow(mnist$test$images)
nrow(mnist$train$images)
mnist_opca = onlinePCA::algorithm1(x = mnist$train$images[1:2000,], k = 5, eps = 1)
xr = (mnist_opca[[1]])
U = (mnist_opca[[2]])
x_r_t = t(xr)
dim(x_r_t)
png(file="examples/images/example%02d.png", width=200, height=200)
for (i in 1:nrow(x_r_t)){
image(1:28, 1:28, matrix(x_r_t[i,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
}
28^2
mnist_opca = onlinePCA::algorithm1(x = mnist$train$images[1:500,], k = 5, eps = 0.35)
xr = (mnist_opca[[1]])
U = (mnist_opca[[2]])
x_r_t = t(xr)
png(file="examples/images/example%02d.png", width=200, height=200)
for (i in 1:nrow(x_r_t)){
image(1:28, 1:28, matrix(x_r_t[i,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
}
mnist_opca = onlinePCA::algorithm1(x = mnist$train$images[1:500,], k = 5, eps = 0.1)
mnist_opca = onlinePCA::algorithm1(x = mnist$train$images[1:500,], k = 5, eps = 10)
xr = (mnist_opca[[1]])
U = (mnist_opca[[2]])
x_r_t = t(xr)
dim(x_r_t)
###################################################
library(animation)
library(magick)
png(file="examples/images/example%02d.png", width=200, height=200)
for (i in 1:nrow(x_r_t)){
image(1:28, 1:28, matrix(x_r_t[i,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
}
image(1:28, 1:28, matrix(mnist$test$images[16,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
image(1:28, 1:28, matrix(mnist$test$images[16,], nrow=28)[ , 28:1],
col = gray(seq(0, 1, 0.05)), xlab = "", ylab="")
